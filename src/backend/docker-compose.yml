version: "3.9"

services:
  api-gateway:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./services/api-gateway:/app/services/api-gateway
      - ./shared:/app/shared
      - api_logs:/app/logs
      - api_tmp:/app/tmp
    env_file: .env.development
    environment:
      - NODE_ENV=development
      - PORT=3000
      - LOG_LEVEL=debug
    depends_on:
      - postgres
      - redis
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    networks:
      - backend

  document-processor:
    build:
      context: .
      target: processor
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./services/document-processor:/app/services/document-processor
      - ./shared:/app/shared
      - processor_tmp:/app/tmp
    env_file: .env.development
    environment:
      - PYTHONUNBUFFERED=1
      - PORT=8000
      - LOG_LEVEL=debug
    depends_on:
      - rabbitmq
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    networks:
      - backend

  email-service:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    volumes:
      - ./services/email-service:/app/services/email-service
      - ./shared:/app/shared
      - email_logs:/app/logs
    env_file: .env.development
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
    depends_on:
      - rabbitmq
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - backend

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - backend

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

volumes:
  postgres_data:
    name: ai-intake-postgres-data
  redis_data:
    name: ai-intake-redis-data
  rabbitmq_data:
    name: ai-intake-rabbitmq-data
  api_logs:
    name: ai-intake-api-logs
  api_tmp:
    name: ai-intake-api-tmp
  processor_tmp:
    name: ai-intake-processor-tmp
  email_logs:
    name: ai-intake-email-logs

networks:
  backend:
    name: ai-intake-backend
    driver: bridge